* Eval
{N \ge 0}
fun eval1(P[0..N] de ent, x: ent) dev r: ent
  r := geval1(P, x, N)
ffun
{r = (\sum i : 0 \le i \le N : P[i] * x ^ i)}

{N \ge 0}
fun geval1(P[0..N] de ent, x: ent, n: ent) dev r: ent
  casos
    n = 0 \implies P[0]
    n \ne 0 \implies P[n] * x ^ n + geval(P, x, n - 1)
  fcasos
ffun
{r = (\sum i : 0 \le i \le n : P[i] * x ^ i)}

vemos que el caso base sera r = (\sum i : 0 \le i \le 0 : P[i] * x ^ i) = P[0] asi que empezamos en el contrario, N.
tomamos r' = (\sum i : 0 \le i \le n - 1 : P[i] * x ^ i) y queremos que tras esta llamada recursiva obtengamos el invariante por lo tanto
r = (\sum i : 0 \le i \le n : P[i] * x ^ i) = r' + P[n] * x ^ n asi que ya sabemos que tenemos que hacer en el algoritmo.

Vemos ahora que nuestro algoritmo no es lineal, puesto que ha de calcular x ^ i para cada exponente, no solo eso, hemos sido un poco torpes, por que el primer valor que le pedimos calcular a nuestro algoritmo es x ^ n, y luego aun que usasemos un acumulador tocaria ir dividiendo, mucho lio, mucho lio, probamos al reves y lo apuntamos para la proxima, que el extremo que cambiamos por constante es por el que empezamos, no en el que acabamos, asi que necesitaremos cambiar el que hace que nuestro primer calculo sea el mas sencillo, x * 0.

#+begin_src
{N \ge 0}
fun eval2(P[0..N] de ent, x: ent) dev r: ent
  r := geval2(P, x, 0)
ffun
{r = (\sum i : 0 \le i \le N : P[i] * x ^ i)}
#+end_src

{N \ge 0}
fun geval2(P[0..N] de ent, x: ent, n: ent) dev r: ent
  casos
    n = N \implies P[N] * x ^ N
    n \ne N \implies P[n] * x ^ n + geval2(P, x, n + 1)
  fcasos
ffun
{r = (\sum i : n \le i \le N : P[i] * x ^ i)}

Y no se me ocurre hacer el i - n por que es lo unico que hizo en su vida el tal horner y no queremos dejarle mal ocurriendosenos a nosotros.

tomamos r' = (\sum i : n + 1 \le i \le N : P[i] * x ^ i) por lo que r = r' + P[n] * x ^ n esto tiene una pinta mas prometedora, por que el primer exponente que calculamos es x * 0, asi que podemos hacer una inmersion por razones de eficiencia a la precondicion con m = 1 inicialmente.

{N \ge 0}
fun eval2(P[0..N] de ent, x: ent) dev r: ent
  r := ggeval2(P, x, 0, 1)
ffun
{r = (\sum i : 0 \le i \le N : P[i] * x ^ i)}

{N \ge 0 \land m = x ^ n}

fun ggeval2(P[0..N] de ent, x: ent, n: ent, m: ent) dev r: ent
  casos
    n = N \implies P[N] * x ^ N
    n \ne N \implies P[n] * m + ggeval2(P, x, n + 1, m * x)
  fcasos
ffun
{r = (\sum i : n \le i \le N : P[i] * x ^ i)}

Idealmente ahora hacemos doblado y desdoblado para pasarlo a final, pero no lo pide, asi que solo pasamos a iterativo con la plantilla y entregamos.

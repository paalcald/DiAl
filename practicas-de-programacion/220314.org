En el eqquiwma general vamos a ir omprendiendo los pasos que damos en el ealgorimto.

Que signiofica que sea correcot? que hace lo que ndica las espeficiacion.
* Tenemos que probar
  1. Se cubren todos los casos
     P(x) \implies B_{t}(x) \lor B_{nt}(x)
  2. El caso base es correcto:
     P(x) \lor B_t(x) \implies Q(x, triv(x))
  3. La funcion recursiva es invodafa siempre en estados que satisfacen su precondicion
     P(x) \lor B_nt(x) \implies P(s(x))
  4. El paso de induccion es correcto
     P(x) \lor B_{nt}(x) \lor Q(s(x), y') \implies Q(x, c(y',x))
  5. Existe una funcion de tamaño
     P(x) \implies t(x) \ge 0
  6. El valor de t decrece al hacer la llamada recursiva
     P(x) \land B_{nt} \implies t(s(x)) \lt t(x)
* Dafny
  #+begin_src dafny
    function potencia_recursiva(a: int,m n: int): nat
	    requires a > 0 && n >= 0
    {
	    if n == 0 then 1
	    else a * potencia_recursiva(a, n - 1)
    }
    
    method potencia(a: int, n: int) returns (p:int)
	    requires a >0 && n >= 0
	    ensures p == potencia_recursiva(a, n)
    {
	    var q: int;
	    if (n == 0) { p := 1;}
	    else
	    {
		    q := a * potencia(a, n - 1);
		    p := a * q ;
	    }
    }
  #+end_src
* Diseño y verificacion de algoritmos recursivos
** Los pasos a seguir son
   1. Especificacion formal del algoritmo.
   2. Analisis por casos, descomposision.
   3. Composicion de resultados.
   4. Verificacion formal de la correccion.
   5. Estudio del coste.
** Ejemplos
   Disenyar una funcion recursiva para calcular multiplicaciones segun el siguiente metodo conocido como del /campesino egipcio/ o /multiplicacion a la rusa/.
   #+begin_src dafny
     method mult(x : int, y: int) returns (p : int)
	     requires x >= 0 && y >= 0
	     ensures p == x * y
     {
	     if y = 0 { p := 0;}
	     else if y = 1 { p := x;}
	     else if y >= 2 { q := mult(2 * x, y / 2) + (y % 2) * x;
			 p := }
     }
   #+end_src
   1. \top \implies? (y = 0) \lor (y = 1) \lor y \ge 2) \iff {y : nat} \top
   2. \top \land y = 0 \implies? 0 = x * y \impliedby y = 0 \impliedby \top \land y = 0
      \top \land y = 1 \implies x = x * y \impliedby y = 1 \impliedby \top
   3. \top \land t \ge 2 \implies 2 * x \ge 0 \land y div 2 \ge 0
                \impliedby x \ge 0 \land y \ge 0
		\iff {x: nat} \true \land y \ge 0
		\impliedby y \ge 2
   4. \true \land y \ge 2 \land p' \equal 2 * x * (y div 2) \implies p = x * y [ p' + x * (y mod 2) / p]
      y mod 2 = 0
      \true \land y \ge 2 \land p' = x * 2 * (y div 2) \implies p' + 0 = x * y
                                         \implies p' + x * (y mod 2) = x * y
      y mod 2 = 1 \implies y = 2 * (y div 2) + 1
      \true \land t \ge 2 \land p' = x * 2 * (y div 2) \implies p' = x * (y - 1)
                                         \implies p' + x * (y mod 2) = x * y
   5. t(x,y) = y
      \top \implies t(x, y) = y \ge 0 \iff {y : nat} cierto
   6. \true \land y \ge 2 \implies t(2 * x, y div 2) \lt t(x, y)
      y div 2 \lt y \impliedby y \ge 2
** Dafny
   #+begin_src dafny
     method fibonacci(n: nat) returns (f :nat)
     {
	     if (n = 0) { f := 0;}
	     else if (n = 1) { f := 1;}
	     else if (n >= 2) { f := fibonacci(n - 1) + fibonacci(n - 2);}
     }		
   #+end_src
   1. n = 0 \land n = 1 \land n \ge 2 \iff \top {n : nat}
   2. \top \land n = 0 \implies (f = fib_n)[0 / f]
                \iff  0 = fib_n
		\impliedby  n = 0
      \top \land n = 1 \implies (f = fib_n)[1 / f]
                \implies  1 = fib_n
		\impliedby  n \equal 1
   3. \true \land n \ge 2 \implies n - 1 \ge 0 \impliedby n \ge 1 \impliedby n \ge 2
      \true \land n \ge 2 \implies n - 2 \ge 0 \iff n \ge 2
   4. \top \land n \ge 2 \land p \equal fib_{n-1} \land q = fib_{n - 2} \implies (f = fib_n)[p + q]
                                         \iff p + q = fib_n \impliedby n \ge 2 \land p = fib_{n-1} \land q = fib_{n-2}
   5. t(n) = n
      \top \implies t(n) \ge 0 \iff n \ge 0 \iff {n: nat} \top
   6. \true \land n \ge 2 \implies t(n - 1) \lt t(n) \iff n - 1 \lt n
                                   \iff {n: nat} \true
				   \impliedby n \ge 2 \land \true
      \true \land n \ge 2 \implies t(n - 1) \lt t(n) \iff n - 2 \lt n
                                   \iff {n: nat} \true
				   \impliedby n \ge 2 \land \true

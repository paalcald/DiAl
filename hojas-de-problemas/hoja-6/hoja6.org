#+Title: Divide y Vencerás
#+Author: Pablo C. Alcalde Montes de Oca
* Busqueda Ternaria. Se trata de decidir si existe un elemento x en un vector de enteros de longitud V[1..n] de longitud n. Diseña un algoritmo de tipo *Divide y Vencerás* con la siguiente estrategia:

$\{n \le 1\}$
#+begin_src pseudo
fun busqueda_ternaria(V[0..n] de ent, x: ent) dev b: bool
#+end_src
$\{b = (\exists i: 1 \le i \le n : V[i] = x)\}$

+ En primer lugar, compara el elemento dado /x/ con el elemento que se encuentra en la posicion /n/3/ del vector.
  
+ Si este es menor que el elemento /x/, entonces lo compara con el elemento que se encuentra en la posición /2n/3/ del vector.
  
+ Y si no coincide con /x/, busca recursivamente en el correspondiente subvector de tamaño /1/3/ del original.

$\{(\forall i,j : 1 \le i < j \le n : V[i] < V[j])\}$
#+begin_src pseudo
fun busqueda_ternaria(V[0..N] de ent, x: ent, c: nat, f: nat) dev b: bool
    var n : nat = f - c + 1;
    casos
        n = 0 ==> b := falso {el redondeo nos puede dejar rangos vacios}
        n = 1 ==> b := (V[c] = x)
      caso n > 1 ==>
            casos
                V[n / 3] = x ==> b := cierto
	        caso V[n / 3] < x ==>
		      casos
                        V[2 * n / 3] = x ==> b := cierto
			caso V[2 * n / 3] > x ==> b := busqueda_ternaria(V, x, n / 3 + 1, 2 * n / 3 - 1)
			caso V[2 * n / 3] < x ==> b := busqueda_ternaria(V, x, 2 * n / 3 + 1, f)
		      fcasos
		caso V[n / 3] > x ==> b := busqueda_ternaria(V, x, c, n / 3 - 1)
	      fcasos
    fcasos
ffun
#+end_src
$\{b = (\exists i: 1 \le i \le n : V[i] = x)\}$

** ¿Qué complejidad tiene este algoritmo? Compáralo con el de la búsqueda binaria.

\begin{align*}
  T(n) &= k_{0} \impliedby n = 0 \\
  T(n) &= k_{1} \impliedby n = 1 \\
  T(n) &= T(\frac{n}{3}) + k_{2} \impliedby n > 1 \\
\end{align*}

\begin{align*}
  T(n) &= T(\frac{n}{3}) + k_{2} \\
  &= T(\frac{n}{3^{i}}) + i*k_{2} \\
  &= T(1) + \log_{3}n * k_{2} \\
  &= \max (k_{0}, k_{1}) + \log_{3}{n} * k_{2}\\
\end{align*}

\( T(n) \in \Theta(\log_{3}n) \in \Theta(\log n) \)

Concluimos que el algoritmo tiene el mismo coste  que la busqueda binaria, sin embargo, un cálculo más detallado teniendo en cuenta las constantes, nos mostraría el coste de la gran cantidad de comparaciones realizadas siendo muy superior al equivalente de la /busqueda binaria/.


* Matriz transpuesta. Dada una matriz cuadrada M, cuya dimensión es potencia de 2, diseña un algoritmo que calcule su transpuesta M^T mediante la técnica de /Divide y Vencerás/.

\begin{align*}
  M_{2^{n}, 2^{n}}           & =
  \begin{pmatrix}
    m_{1,1}                  & \cdots & m_{1, 2^{n-1}}           & m_{1, 2^{n-1} + 1}           & \cdots & m_{1,2^{n}}           \\
    \vdots                   & \ddots & \vdots                   & \vdots                       & \ddots & \vdots                \\
    m_{2^{n-1},1}             & \cdots & m_{2^{n-1}, 2^{n-1}}     & m_{2^{n-1}, 2^{n-1} + 1}     & \cdots & m_{2^{n-1},2^{n}}     \\
    m_{2^{n-1} + 1, 1}           & \cdots & m_{2^{n-1} + 1, 2^{n-1}} & m_{2^{n-1} + 1, 2^{n-1} + 1} & \cdots & m_{2^{n-1} + 1,2^{n}} \\
    \vdots                   & \ddots & \vdots                       & \vdots                       & \ddots & \vdots                \\
    m_{2^{n},1}               & \cdots & m_{2^{n}, 2^{n-1}}          & m_{2^{n}, 2^{n-1} + 1}       & \cdots & m_{2^{n},2^{n}}       \\
  \end{pmatrix}                                                                                                                  \\
  m_{1}                         & = \begin{pmatrix}
                                  m_{1,1}                  & \cdots & m_{1, 2^{n-1}}       \\
                                  \vdots                   & \ddots & \vdots               \\
                                      m_{2^{n-1},1}             & \cdots & m_{2^{n-1}, 2^{n-1}} \\
                                    \end{pmatrix} \\
  m_{2} &= \begin{pmatrix}
             m_{1, 2^{n-1} + 1}           & \cdots & m_{1,2^{n}}           \\ 
              \vdots                       & \ddots & \vdots                \\ 
             m_{2^{n-1}, 2^{n-1} + 1}     & \cdots & m_{2^{n-1},2^{n}}     \\
           \end{pmatrix} \\
  m_{3} &= \begin{pmatrix}
             m_{2^{n-1} + 1, 1}           & \cdots & m_{2^{n-1} + 1, 2^{n-1}} \\
             \vdots                   & \ddots & \vdots                   \\
             m_{2^{n},1}               & \cdots & m_{2^{n}, 2^{n-1}}      \\
           \end{pmatrix}\\
  m_{4} &= \begin{pmatrix}
            & m_{2^{n-1} + 1, 2^{n-1} + 1} & \cdots & m_{2^{n-1} + 1,2^{n}} \\
            & \vdots                       & \ddots & \vdots                \\
            & m_{2^{n}, 2^{n-1} + 1}       & \cdots & m_{2^{n},2^{n}}       \\
          \end{pmatrix}\\
  \end{align*}

Diseñaremos un algoritmo que realice la traspuesta por bloques recursivamente de tal modo que \(  M\prime = \begin{pmatrix}
               m_{1}\prime & m_{3}\prime \\
               m_{2}\prime & m_{4}\prime \\
             \end{pmatrix}\) lo que en el caso base de tamaño /2x2/ \(m = 
             \begin{pmatrix}
               m_{1,1} & m_{1,2} \\
               m_{2,1} & m_{2,2} \\
             \end{pmatrix}\) lo que nos da simplemente \(m\prime =
             \begin{pmatrix}
               m_{1,1} & m_{2,1} \\
               m_{1,2} & m_{2,2} \\
             \end{pmatrix}\) que es un intercambio de dos casillas.

Usaremos por lo tanto el siguiente procedimiento auxiliar en nuestro código, aún que realmente lo tomaremos como un procedimiento que modifica M, por esto mismo crearemos una copia de M previamente que podamos modificar.

$\{1 \le o.primero \le N \land 1 \le o.segundo \le N\}$
$\{1 \le d.primero \le N \land 1 \le d.segundo \le N\}$
#+begin_src pseudo
fun intercambiar_elemento(M[1..N][1..N] de real, o: par, d: par)
     var temporal: real
     temporal = M[d.primero, d.segundo];
     M[d.primero, d.segundo] = M[o.primero, o.segundo];
     M[o.primero, o.segundo] = temporal;
ffun
#+end_src
$\{(\forall i, j: 1 \le i, j \le N \land i \not\in \{o.primero, d.primero\} \land j \not\in \{o.primero, d.primero\} : M[i,j] = N[i,j])\}$
$\{M.old[o.primero,o.segundo] = M[d.primero, d.segundo]\}$
$\{M.old[d.primero,d.segundo] = M[o.primero, o.segundo]\}$

Al mismo tiempo necesitaremos un procedimiento que noss

#+begin_src pseudo
fun intercambiar_bloque(E / S M[1..N][1..N] de real, o: par, d: par, t: par)
    var temporal: real;
    var <i,j : nat> = <0, 0>; 
    mientras i < t.primero hacer
        mientras j < t.segundo hacer
	      temporal = M[d.primero + i, d.primero + j];
	      M[d.primero + i, d.segundo + j] = M[o.primero + i, o.segundo + j];
            M[o.primero + i, o.segundo + j] = temporal;
	      j := j + 1
	  fmientras;
	  i := i + 1
    fmientras
ffun
#+end_src

#+begin_src pseudo
fun trasponer_bloque(E / S M[1..N][1..N] de real, i: par, t: nat)
    casos
        t = 2 ==> intercambiar_elemento(M, (i.primero, i.segundo + 1),
				           (i.primero + 1, i.segundo))
	caso t > 0 ==> intercambiar_bloque(M, (i.primero, i.segundo + t / 2),
				         (i.primero + t / 2, i.segundo),
				         (t / 2, t / 2));
		  trasponer_bloque(M, (i.primero, i.segundo + t / 2),
		                      (t / 2, t / 2));
	          trasponer_bloque(M, (i.primero + t / 2, i.segundo),
		                      (t / 2, t / 2));
	          trasponer_bloque(M, (i.primero, i.segundo),
		                      (t / 2, t / 2));
		  trasponer_bloque(M, (i.primero + t / 2, i.segundo + t / 2),
		                      (t / 2, t / 2))
	fcasos
ffun	          
#+end_src

#+begin_src pseudo
fun traspuesta(M[1..N][1..N] de real) dev T[1..N][1..N] de real
    var T[1..N][1..N] de real = M[1..N][1..N];
    trasponer_bloque(T, (1, 1), (N, N))
ffun
#+end_src

\begin{align*}
  t &= n * n \\
  T(4) &= k_{0} \\
  T(t) &= 4T(\frac{t}{4}) + \frac{n}{4}k_1\\
  &= 4^{i}T(\frac{t}{4^i}) + i \frac{n}{4}k_1 \\
  &= k_0\log_4 n + k_1n\log_4 n \\
\end{align*}


Lo que haría nuestro algoritmo $\Theta(n \log n)$ excepto por que copiamos la matriz, que es $\Theta(n^{2})$ 

* Cercanos a la mediana. Diseña un algoritmo de coste \Omega(n) y de tipo *Divide y Vencerás* que dado un vector V[1..n] con /n/ números enteros y un entero positivo /k \le n/, determine los /k/ números de V más cercanos a la mediana de V. Por ejemplo, si V = [3, 4, 1, 5, 2] con n = 5 elementos y mediana V[3] = 3, para k = 3, los elementos devueltos por el algoritmo serían [3, 4, 2].

Como sabemos que el cálculo de la mediana puede ser en el caso peor lineal utilizando el procedimiento /seleccion2/ visto en clase para el /n + 1 div 2/-ésimo elemento, partiremos de esto, una vez obtenida la mediana /med/ se nos ocurren dos caminos a seguir, dependiendo de si la memoría está restringida o no.
- Podriamos generar el vector W por medio de la transformacion M(x) = abs(x - med) sobre /V/ y a continuación de ahí buscar la distancia al elemento k-ésimo /d/ utilizando /seleccion2/.
  
- Podriamos volver a utilizar el mismo procedimiento, /seleccion2/ para encontrar el k-ésimo elemento de nuestro vector otra vez, que llamaremos /g/, salvo que en este caso modificaremos /particion/ para que en lugar de trabajar con el elemento /V[i]/ trabaje con el elemento /abs(V[i] - med)/, de esta manera nos ahorramos guardar memoria adicional.
  
En cualquiera de los dos casos con nuestro elemento k-ésimo ya solo tenemos que filtrar /V/ para verificar el predicado con P(x) = abs(x - med) \le d o alternativamente con el predicado P(x) = abs(x - med) \le abs(g - med) en caso de haber calculado directamente el elemento en lugar de la distancia, lo que nos daría la lista a devolver.

#+begin_src pseudo
fun cercanos_mediana(V[1..N] de ent, k: ent) dev G[1..k] de ent
    var med: ent := seleccion2(V, 0, N - 1, N div 2);{O(n)}
    var W[1..N] de ent;
    var i, u: ent = 0;
    mientras i < N - 1 hacer {0(n)}
    	  W[i] := si V[i] > med entonces V[i] - med sino med - V[i];
	  i := i + 1
    fmientras
    var d: ent := seleccion2(W, 0, N - 1, k); {0(n)}
    i := 0;
    var j: ent := 0;
    mientras i < n hacer {O(n)}
        si V[i] - med <= d entonces G[j] := V[i]; j := j + 1 sino nada;
	  i := i + 1
    fmientras
ffun
#+end_src

En este caso concluimos que el orden es /lineal/ meramente por ser composicion de procedimientos lineales ya vistos en clase y bucles simples.

Posible mejora: Una vez obtenida la mediana podriamos usar un monticulo de máximos de tamaño k, en el que iriamos insertando los elementos de V en sucesión, teniendo en cuenta que cuando no quepan más, extraeriamos el máximo \Theta(log k) y colocariamos el nuevo valor O(log k), dependiendo de la dimensión de k respecto a n podría ser una mejora.

* Mediana Ponderada.

Se tiene un vector V[1..n] de números enteros distintos, con pesos asociados p_1, ..., p_n. Los pesos son valores no negativos y verifican que \sum_{i=1}^n p_i = 1. Se define la /mediana ponderada/ de /V/ como aquella componente /V[m]/ con 1 \le m \le n que satisface simultáneamente las siguientes dos condiciones:

 
$(\sum i : V[i] < V[m] : p_i) < \frac{1}{2}$ y $(\sum i : V[i] \le V[m] : p_i ) \ge \frac{1}{2}\)$

Por ejemplo, para /n/ = 5, /V/ = [4, 2, 9, 3, 7] y P = [0.15, 0.2, 0.3, 0.1, 0.25] con \sum_{i=1}^5 p_i = 1, la media ponderada es /V/[5] = 7, porque (\sum i : V[i] < 7 : p_i) = p_1 + p_2 + p_4 = 0.15 + 0.2 + 0.1 = 0.45 < $\frac{1}{2}$ y (\sum i : V[i]  \le 7 : p_i) = p_1 + p_2 + p_4 + p_5 = 0.7 \ge $\frac{1}{2}$.
** Diseña un algoritmo de tipo *Divide y Vencerás* que encuentre la mediana ponderada en un tiempo lineal en media (observa que /V/ puede no estar ordenado).
Para encontrar la mediana primero tomamos un elemento y comprobamos si es la mediana, en caso de no serlo tendremos tres razones:

- No cumple las condiciones por defecto, en este caso sabemos que tendremos que probar con un número mayor.
  
- La primera suma excede 1/2, en este caso sabemos que tendremos que probar con un número menor.

Si ordenamos los elementos de manera que dejamos todos los mayores a la derecha y los menores a la izquierda, escoger nuestro siguiente candidato será \Theta(1). Y esta ordenación será O(n).

#+begin_src pseudo
fun mediana_ponderada(V[1..n] de ent, P[1..N] de real) dev m: ent
    var I[1..N] de ent;
    var i: ent = 0;
    mientras i < N hacer
        I[i] := i;
	    i := i + 1
	fmientras
    m := mediana_ponderada_rec(V, P, 0, n - 1)
ffun
#+end_src

#+begin_src pseudo
fun mediana_ponderada(V[1..N] de ent, P[1..N] de real, E / S I[1..N] de ent , c: ent, f: ent) dev r: ent
    var i := 0;
    var j := f - 1;
    var p := 0;
    m := aleatorio(1,N) - 1;
    mientras i < f hacer {O(n)}
        casos
		V[I[i]] < V[I[m]] ==> p := p + P[I[i]]; i := i + 1
	      caso V[I[i]] = V[I[m]] ==> si m != f entonces
                                    < I[m], I[m + 1] > := < I[m + 1], I[m] >;
 				        m := m + 1
				    sino nada
	      caso V[I[i]] > V[I[m]] ==> < I[i], I[j] > := < I[j], I[i] >; j := j - 1
	    fcasos
	fmientras
	casos
	    p < .5 && p + P[I[m]] >= .5 ==> r := m
	    p < .5 ==> mediana_ponderada(V, P, I, m + 1, n - 1)
	    p > .5 ==> mediana_ponderada(V, P, I, 0, m - 1)
	fcasos
ffun
#+end_src

\begin{align*}
  T_m(n) &= \frac{1}{n} \sum_{i = 1}^{n} \left( T_{m}(n - i) + n \right) \\
         &= \frac{1}{n} \left( \sum_{i = 1}^{n} T_{m}(n - i) + \sum_{i = 1}^{n} n \right) \\
         &= \frac{1}{n} \left( \sum_{i = 1}^{n} T_{m}(n - i) + \frac{n(n - 1)}{2} \right) \\
  nT_m(n)&= n(n-1) + \left( \sum_{i = 0}^{n - 1} T_{m}(i) \right) \\
\end{align*}

Lo que es una recurrencia con historia, que resolveremos restando el término T_m(n) y el T_m(n - 1).
\begin{align*}
  nT_m(n) &= n(n-1) + \left( \sum_{i = 0}^{n - 1} T_{m}(i) \right) \\
    nT_m(n) &= n(n-1) + T_m(n - 1) + \left( \sum_{i = 0}^{n - 2} T_{m}(i) \right) \\
  (n - 1)T_m(n - 1) &= (n - 1)(n - 2) + \left( \sum_{i = 0}^{n - 2} T_{m}(i) \right) \\
\end{align*}
Que restando queda

\begin{align*}
  nT_m(n) - (n - 1)T_m(n - 1) &= n(n-1) + T_m(n - 1) - (n - 1)(n - 2) \\
  nT_m(n)  &= n(n - 1) + nT_m(n - 1) - (n - 1)(n - 2) \\
  nT_m(n)  &= (n - n + 2)(n - 1) + nT_m(n - 1) \\
  nT_m(n)  &= 2(n - 1) + nT_m(n - 1) \\
  T_m(n)  &= \frac{2(n - 1)}{n} + T_m(n - 1) \\
  T_m(n)  &= 2 - \frac{2}{n} + T_m(n - 1) \\
\end{align*}

Que finalmente podemos observar que tiene orden \Theta(n)

Sin embargo esta ordenación podría ser muy ineficiente si empezamos por un valor extremo y al escoger nuestro siguiente candidato damos con justo el valor siguiente.

** ¿Como se puede conseguir un coste lineal en tiempo en el caso peor?
Tendríamos que conseguir una aproximación al valor que pudiesemos calcular en tiempo /lineal/, utilizar el algoritmo /mediana de las medianas/ sería una opción, pero ahora no se me ocurre como demostraría que eso reduce el coste a /lineal/ al no tener en cuenta los pesos.

* Subsecuencia de suma máxima. Dados /n/ números enteros cualesquiera a_1, a_2, ..., a_n, queremos calcular el valor de la expresión \(\max_{1 \le i \le j \le n} \left(\sum_{k = i}^{j} a_k\right) \) que calcule el máximo de las sumas parciales de elementos consecutivos. Por ejemplo, dados 6 números enteros [-2, 11, -4, 13, -5, -2], la solución al problema es 20 (suma de a_2 hasta a_4). Deseamos implementar un algoritmo *Divide y Vencerás* de complejidad O(n log n) que resuelva el problema.

Como estamos en *divide y vencerás* y se pide orden n log n tendremos que dividir la lista, tomamos la mitad por que ya hemos visto lo mal que sale hacer tercios y que no mejora el orden.

Una vez dividida la lista $A = A_{1} ++ A_{2}$ tendremos tres posibilidades para este máximo:

- Que la suma máxima esté contenida en su totalidad en A_1.
- Que la suma máxima esté contenida en su totalidad en A_2.
- Que la suma máxima contenga elementos de ambos conjuntos, A_1 y A_2.

Los dos primeros casos son una llamada recursiva sin más, nos centraremos en el caso restante, que contenga elementos de ambos conjuntos, para que contenga elementos de A_1 = [a_1^1, a_1^2, ..., a_1^n] tiene que contener al menos al último elemento a_1^n y puede contener tantos como A_1 tenga, es decir, tenemos que calcular $(\max i : 1 \le i \le n : (\sum j : i \le j \le n : A_{1}[j]))$ que sabemos será coste lineal.

Análogamente para A_2 tenemos que calcular $(\max i : 1 \le i \le n : (\sum j : 1 \le j \le i : A_{1}[j]))$ que también será coste lineal.

Que nos dejará con una recurrencia de la forma $T(n) = 2T(n / 2) + k_{1} n + k_{2}$ que sabemos desembocará en \Theta(n log n), nos sirve así que escribiremos su pseudocódigo a continuación

#+begin_src pseudo
fun segmento_suma_maxima(A[1..N] de ent) dev m: ent
    m = segmento_suma_maxima_parcial(A[1..N], 0, N - 1)
ffun
#+end_src

#+begin_src pseudo
fun segmento_suma_maxima_parcial(A[0..N) de ent, c: nat, f: nat) dev m: ent
    var n: ent = f + 1 - c
    m1 := segmento_suma_maxima_parcial(A, c, n / 2)
    m2 := segmento_suma_maxima_parcial(A, n / 2 + 1, f)
    m3 := maximo_suma_parcial_hasta(A, c, n / 2)
    m4 := maximo_suma_parcial_desde(A, n / 2 + 1, f)
    m := max(m1, m2, m3 + m4)
ffun
#+end_src

#+begin_src pseudo
fun maximo_suma_parcial_hasta(A[0..N) de ent, c: nat, f: nat) dev m: ent
    var i: nat = f;
    acc := 0;
    m := A[i];
    mientras i >= c hacer
        acc := acc + A[i];
        m := max(m, acc);
	  i := i - 1
    fmientras 
ffun
#+end_src

#+begin_src pseudo
fun maximo_suma_parcial_desde(A[0..N) de ent, c: nat, f: nat) dev m: ent
    var i: nat = c;
    acc := 0;
    m := A[i];
    mientras i <= f hacer
        acc := acc + A[i];
        m := max(m, acc);
	  i := i + 1
    fmientras 
ffun
#+end_src

* Ejercicio 6
Es el mismo ejercicio pero con molinos en lugar de listas.

#+begin_src pseudo
fun segmento_suma_maxima(A[1..N] de ent) dev m: ent
    m = segmento_suma_maxima_parcial(A[1..N], 0, N - 1)
ffun
#+end_src

#+begin_src pseudo
fun segmento_suma_maxima_parcial(A[0..N) de ent, c: nat, f: nat)
    dev < m: ent, first: nat, last: nat >
    var n: ent = f + 1 - c
    casos
        n = 1 ==> < m, first, last > := < A[c], c, c >
	caso n > 1 ==> < m1, first1, last1 > := segmento_suma_maxima_parcial(A, c, n / 2)
                < m2, first2, last2 > := segmento_suma_maxima_parcial(A, n / 2 + 1, f)
                <m31, first3 > := maximo_suma_parcial_hasta(A, c, n / 2)
                <m32, last3 > := maximo_suma_parcial_desde(A, n / 2 + 1, f)
		  < m3, first3, last3 > := < m31 + m32, first3, last3>
                casos
		      m1 > m2 && m1 > m3 ==> < m, first, last > := < m1, first1, last1 >
		    caso m2 > m1 && m2 > m3 ==> < m, first, last > := < m2, first2, last2 >
		    caso m3 > m1 && m3 > m2 ==> < m, first, last > := < m3, first3, last3 >
		  fcasos
    fcasos
ffun
#+end_src

#+begin_src pseudo
fun maximo_suma_parcial_hasta(A[0..N) de ent, c: nat, f: nat) dev < m: ent, first: nat >
    var i: nat = f;
    acc := 0;
    m := A[i];
    mientras i >= c hacer
        acc := acc + A[i];
	  si m < acc entonces m := acc; first := i;
	  i := i - 1
    fmientras 
ffun
#+end_src

#+begin_src pseudo
fun maximo_suma_parcial_desde(A[0..N) de ent) dev < m: ent, last: nat >
    var i: nat = c;
    m := A[i];
    acc := 0;
    mientras i <= f hacer
        acc := acc + A[i];
	  si m < acc entonces m := acc; last := i;
	  i := i + 1
    fmientras 
ffun
#+end_src
